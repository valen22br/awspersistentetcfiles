"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const os = require("os");
const path = require("path");
const util_1 = require("util");
const fs = require("fs-extra");
const migrate_1 = require("../../lib/commands/migrate");
const mock_sdk_1 = require("../util/mock-sdk");
const exec = (0, util_1.promisify)(child_process_1.exec);
describe('Migrate Function Tests', () => {
    let sdkProvider;
    let getTemplateMock;
    let cfnMocks;
    const testResourcePath = [__dirname, 'test-resources'];
    const templatePath = [...testResourcePath, 'templates'];
    const stackPath = [...testResourcePath, 'stacks'];
    const validTemplatePath = path.join(...templatePath, 's3-template.json');
    const validTemplate = (0, migrate_1.readFromPath)(validTemplatePath);
    beforeEach(() => {
        sdkProvider = new mock_sdk_1.MockSdkProvider();
        getTemplateMock = jest.fn();
        cfnMocks = { getTemplate: getTemplateMock };
        sdkProvider.stubCloudFormation(cfnMocks);
    });
    test('validateSourceOptions throws if both --from-path and --from-stack is provided', () => {
        expect(() => (0, migrate_1.validateSourceOptions)('any-value', true)).toThrowError('Only one of `--from-path` or `--from-stack` may be provided.');
    });
    test('validateSourceOptions throws if neither --from-path or --from-stack is provided', () => {
        expect(() => (0, migrate_1.validateSourceOptions)(undefined, undefined)).toThrowError('Either `--from-path` or `--from-stack` must be used to provide the source of the CloudFormation template.');
    });
    test('validateSourceOptions does not throw when only --from-path is supplied', () => {
        expect(() => (0, migrate_1.validateSourceOptions)('any-value', false)).not.toThrow();
    });
    test('validateSourceOptions does now throw when only --from-stack is provided', () => {
        expect(() => (0, migrate_1.validateSourceOptions)(undefined, true)).not.toThrow();
    });
    test('readFromPath produces a string representation of the template at a given path', () => {
        expect((0, migrate_1.readFromPath)(validTemplatePath)).toEqual(fs.readFileSync(validTemplatePath, 'utf8'));
    });
    test('readFromPath returns undefined when template file is not provided', () => {
        expect((0, migrate_1.readFromPath)()).toEqual(undefined);
    });
    test('readFromPath throws error when template file does not exist at a given path', () => {
        const badTemplatePath = './not-here.json';
        expect(() => (0, migrate_1.readFromPath)(badTemplatePath)).toThrowError(`\'${badTemplatePath}\' is not a valid path.`);
    });
    test('readFromStack produces a string representation of the template retrieved from CloudFormation', async () => {
        const template = fs.readFileSync(validTemplatePath);
        getTemplateMock.mockImplementationOnce(() => ({
            TemplateBody: template,
        }));
        expect(await (0, migrate_1.readFromStack)('this-one', sdkProvider, { account: 'num', region: 'here', name: 'hello-my-name-is-what...' })).toEqual(template);
    });
    test('readFromStack throws error when no stack exists with the stack name in the account and region', async () => {
        getTemplateMock.mockImplementationOnce(() => { throw new Error('No stack. This did not go well.'); });
        await expect(() => (0, migrate_1.readFromStack)('that-one', sdkProvider, { account: 'num', region: 'here', name: 'hello-my-name-is-who...' })).rejects.toThrowError('No stack. This did not go well.');
    });
    test('setEnvironment sets account and region when provided', () => {
        expect((0, migrate_1.setEnvironment)('my-account', 'somewhere')).toEqual({ account: 'my-account', region: 'somewhere', name: 'cdk-migrate-env' });
    });
    test('serEnvironment uses default account and region when not provided', () => {
        expect((0, migrate_1.setEnvironment)()).toEqual({ account: 'unknown-account', region: 'unknown-region', name: 'cdk-migrate-env' });
    });
    test('generateStack generates the expected stack string when called for typescript', () => {
        const stack = (0, migrate_1.generateStack)(validTemplate, 'GoodTypeScript', 'typescript');
        expect(stack).toEqual(fs.readFileSync(path.join(...stackPath, 's3-stack.ts'), 'utf8'));
    });
    test('generateStack generates the expected stack string when called for python', () => {
        const stack = (0, migrate_1.generateStack)(validTemplate, 'GoodPython', 'python');
        expect(stack).toEqual(fs.readFileSync(path.join(...stackPath, 's3_stack.py'), 'utf8'));
    });
    test('generateStack generates the expected stack string when called for java', () => {
        const stack = (0, migrate_1.generateStack)(validTemplate, 'GoodJava', 'java');
        expect(stack).toEqual(fs.readFileSync(path.join(...stackPath, 'S3Stack.java'), 'utf8'));
    });
    test('generateStack generates the expected stack string when called for csharp', () => {
        const stack = (0, migrate_1.generateStack)(validTemplate, 'GoodCSharp', 'csharp');
        expect(stack).toEqual(fs.readFileSync(path.join(...stackPath, 'S3Stack.cs'), 'utf8'));
    });
    // TODO: fix with actual go template
    test('generateStack generates the expected stack string when called for go', () => {
        const stack = (0, migrate_1.generateStack)(validTemplate, 'GoodGo', 'go');
        expect(stack).toEqual(fs.readFileSync(path.join(...stackPath, 's3.go'), 'utf8'));
    });
    test('generateStack throws error when called for other language', () => {
        expect(() => (0, migrate_1.generateStack)(validTemplate, 'BadBadBad', 'php')).toThrowError('stack generation failed due to error \'unreachable\'');
    });
    cliTest('generateCdkApp generates the expected cdk app when called for typescript', async (workDir) => {
        const stack = (0, migrate_1.generateStack)(validTemplate, 'GoodTypeScript', 'typescript');
        await (0, migrate_1.generateCdkApp)('GoodTypeScript', stack, 'typescript', workDir);
        // Packages exist in the correct spot
        expect(fs.pathExistsSync(path.join(workDir, 'GoodTypeScript', 'package.json'))).toBeTruthy();
        expect(fs.pathExistsSync(path.join(workDir, 'GoodTypeScript', 'bin', 'good_type_script.ts'))).toBeTruthy();
        expect(fs.pathExistsSync(path.join(workDir, 'GoodTypeScript', 'lib', 'good_type_script-stack.ts'))).toBeTruthy();
        // Replaced stack file is referenced correctly in app file
        const app = fs.readFileSync(path.join(workDir, 'GoodTypeScript', 'bin', 'good_type_script.ts'), 'utf8').split('\n');
        expect(app.map(line => line.match('import { GoodTypeScriptStack } from \'../lib/good_type_script-stack\';')).filter(line => line).length).toEqual(1);
        expect(app.map(line => line.match(/new GoodTypeScriptStack\(app, \'GoodTypeScript\', \{/)).filter(line => line).length).toEqual(1);
        // Replaced stack file is correctly generated
        const replacedStack = fs.readFileSync(path.join(workDir, 'GoodTypeScript', 'lib', 'good_type_script-stack.ts'));
        expect(replacedStack).toEqual(fs.readFileSync(path.join(...stackPath, 's3-stack.ts')));
    });
    cliTest('generateCdkApp generates the expected cdk app when called for python', async (workDir) => {
        const stack = (0, migrate_1.generateStack)(validTemplate, 'GoodPython', 'python');
        await (0, migrate_1.generateCdkApp)('GoodPython', stack, 'python', workDir);
        // Packages exist in the correct spot
        expect(fs.pathExistsSync(path.join(workDir, 'GoodPython', 'requirements.txt'))).toBeTruthy();
        expect(fs.pathExistsSync(path.join(workDir, 'GoodPython', 'app.py'))).toBeTruthy();
        expect(fs.pathExistsSync(path.join(workDir, 'GoodPython', 'good_python', 'good_python_stack.py'))).toBeTruthy();
        // Replaced stack file is referenced correctly in app file
        const app = fs.readFileSync(path.join(workDir, 'GoodPython', 'app.py'), 'utf8').split('\n');
        expect(app.map(line => line.match('from good_python.good_python_stack import GoodPythonStack')).filter(line => line).length).toEqual(1);
        expect(app.map(line => line.match(/GoodPythonStack\(app, "GoodPython",/)).filter(line => line).length).toEqual(1);
        // Replaced stack file is correctly generated
        const replacedStack = fs.readFileSync(path.join(workDir, 'GoodPython', 'good_python', 'good_python_stack.py'));
        expect(replacedStack).toEqual(fs.readFileSync(path.join(...stackPath, 's3_stack.py')));
    });
    cliTest('generateCdkApp generates the expected cdk app when called for java', async (workDir) => {
        const stack = (0, migrate_1.generateStack)(validTemplate, 'GoodJava', 'java');
        await (0, migrate_1.generateCdkApp)('GoodJava', stack, 'java', workDir);
        // Packages exist in the correct spot
        expect(fs.pathExistsSync(path.join(workDir, 'GoodJava', 'pom.xml'))).toBeTruthy();
        expect(fs.pathExistsSync(path.join(workDir, 'GoodJava', 'src', 'main', 'java', 'com', 'myorg', 'GoodJavaApp.java'))).toBeTruthy();
        expect(fs.pathExistsSync(path.join(workDir, 'GoodJava', 'src', 'main', 'java', 'com', 'myorg', 'GoodJavaStack.java'))).toBeTruthy();
        // Replaced stack file is referenced correctly in app file
        const app = fs.readFileSync(path.join(workDir, 'GoodJava', 'src', 'main', 'java', 'com', 'myorg', 'GoodJavaApp.java'), 'utf8').split('\n');
        expect(app.map(line => line.match('public class GoodJavaApp \{')).filter(line => line).length).toEqual(1);
        expect(app.map(line => line.match(/        new GoodJavaStack\(app, "GoodJava", StackProps.builder()/)).filter(line => line).length).toEqual(1);
        // Replaced stack file is correctly generated
        const replacedStack = fs.readFileSync(path.join(workDir, 'GoodJava', 'src', 'main', 'java', 'com', 'myorg', 'GoodJavaStack.java'));
        expect(replacedStack).toEqual(fs.readFileSync(path.join(...stackPath, 'S3Stack.java')));
    });
    cliTest('generateCdkApp generates the expected cdk app when called for csharp', async (workDir) => {
        const stack = (0, migrate_1.generateStack)(validTemplate, 'GoodCSharp', 'csharp');
        await (0, migrate_1.generateCdkApp)('GoodCSharp', stack, 'csharp', workDir);
        // Packages exist in the correct spot
        expect(fs.pathExistsSync(path.join(workDir, 'GoodCSharp', 'src', 'GoodCSharp.sln'))).toBeTruthy();
        expect(fs.pathExistsSync(path.join(workDir, 'GoodCSharp', 'src', 'GoodCSharp', 'Program.cs'))).toBeTruthy();
        expect(fs.pathExistsSync(path.join(workDir, 'GoodCSharp', 'src', 'GoodCSharp', 'GoodCSharpStack.cs'))).toBeTruthy();
        // Replaced stack file is referenced correctly in app file
        const app = fs.readFileSync(path.join(workDir, 'GoodCSharp', 'src', 'GoodCSharp', 'Program.cs'), 'utf8').split('\n');
        expect(app.map(line => line.match('namespace GoodCSharp')).filter(line => line).length).toEqual(1);
        expect(app.map(line => line.match(/        new GoodCSharpStack\(app, "GoodCSharp", new StackProps/)).filter(line => line).length).toEqual(1);
        // Replaced stack file is correctly generated
        const replacedStack = fs.readFileSync(path.join(workDir, 'GoodCSharp', 'src', 'GoodCSharp', 'GoodCSharpStack.cs'));
        expect(replacedStack).toEqual(fs.readFileSync(path.join(...stackPath, 'S3Stack.cs')));
    });
    cliTest('generatedCdkApp generates the expected cdk app when called for go', async (workDir) => {
        const stack = (0, migrate_1.generateStack)(validTemplate, 'GoodGo', 'go');
        await (0, migrate_1.generateCdkApp)('GoodGo', stack, 'go', workDir);
        expect(fs.pathExists(path.join(workDir, 's3.go'))).toBeTruthy();
        const app = fs.readFileSync(path.join(workDir, 'GoodGo', 'good_go.go'), 'utf8').split('\n');
        expect(app.map(line => line.match(/func NewGoodGoStack\(scope constructs.Construct, id string, props GoodGoStackProps\) \*GoodGoStack \{/)).filter(line => line).length).toEqual(1);
        expect(app.map(line => line.match(/    NewGoodGoStack\(app, "GoodGo", &GoodGoStackProps\{/)));
    });
    cliTest('generatedCdkApp generates a zip file when --compress is used', async (workDir) => {
        const stack = (0, migrate_1.generateStack)(validTemplate, 'GoodTypeScript', 'typescript');
        await (0, migrate_1.generateCdkApp)('GoodTypeScript', stack, 'typescript', workDir, true);
        // Packages not in outDir
        expect(fs.pathExistsSync(path.join(workDir, 'GoodTypeScript', 'package.json'))).toBeFalsy();
        expect(fs.pathExistsSync(path.join(workDir, 'GoodTypeScript', 'bin', 'good_type_script.ts'))).toBeFalsy();
        expect(fs.pathExistsSync(path.join(workDir, 'GoodTypeScript', 'lib', 'good_type_script-stack.ts'))).toBeFalsy();
        // Zip file exists
        expect(fs.pathExistsSync(path.join(workDir, 'GoodTypeScript.zip'))).toBeTruthy();
        // Unzip it
        await exec(`unzip ${path.join(workDir, 'GoodTypeScript.zip')}`, { cwd: workDir });
        // Now the files should be there
        expect(fs.pathExistsSync(path.join(workDir, 'package.json'))).toBeTruthy();
        expect(fs.pathExistsSync(path.join(workDir, 'bin', 'good_type_script.ts'))).toBeTruthy();
        expect(fs.pathExistsSync(path.join(workDir, 'lib', 'good_type_script-stack.ts'))).toBeTruthy();
    });
});
function cliTest(name, handler) {
    test(name, () => withTempDir(handler));
}
async function withTempDir(cb) {
    const tmpDir = await fs.mkdtemp(path.join(os.tmpdir(), 'aws-cdk-test'));
    try {
        await cb(tmpDir);
    }
    finally {
        await fs.remove(tmpDir);
    }
}
//# sourceMappingURL=data:application/json;base64,